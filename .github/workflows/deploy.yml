name: Deploy Nginx App

on:
  push:
    branches:
      - main

jobs:
  build-docker-setup-infra:
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.wait-for-instance.outputs.instance_ip }}

    env:
      REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}
      CDK_DEFAULT_ACCOUNT: ${{ secrets.AWS_ACCOUNT_ID }}
      CDK_DEFAULT_REGION: ap-southeast-2

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        run: |
          set -x
          IMAGE_TAG=latest
          docker build -t $REPOSITORY_URI:$IMAGE_TAG .
          docker push $REPOSITORY_URI:$IMAGE_TAG

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r infra/requirements.txt

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Deploy CDK Stack
        working-directory: ./infra
        run: cdk deploy --require-approval never

      - name: Wait for EC2 Instance to be Ready
        id: wait-for-instance
        run: |
          # Get the instance ID from CDK outputs if possible
          STACK_OUTPUTS=$(aws cloudformation describe-stacks --stack-name nginx-cicd-stack --query "Stacks[0].Outputs" --output json)
          INSTANCE_ID=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="InstanceId") | .OutputValue')
          INSTANCE_IP=$(echo $STACK_OUTPUTS | jq -r '.[] | select(.OutputKey=="InstancePublicIp") | .OutputValue')

          # Fallback to searching by tag if outputs aren't available
          if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "null" ]; then
            echo "Looking up instance by tag..."
            INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=NginxInstance" "Name=instance-state-name,Values=pending,running" --query "Reservations[0].Instances[0].InstanceId" --output text)

            if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "None" ]; then
              echo "Error: No running EC2 instance with tag 'NginxInstance' found."
              exit 1
            fi

            INSTANCE_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          fi

          echo "Found instance $INSTANCE_ID with IP $INSTANCE_IP"

          # Wait for the instance to be running
          echo "Waiting for instance to be in running state..."
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

          # Wait for status checks to pass
          echo "Waiting for instance status checks to pass..."
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID

          # Extra verification of SSH availability
          echo "Verifying SSH connectivity..."
          counter=0
          max_attempts=10
          while [ $counter -lt $max_attempts ]; do
            if nc -z -w5 $INSTANCE_IP 22; then
              echo "SSH port is open!"
              break
            fi
            echo "Waiting for SSH port to open... (attempt $((counter+1))/$max_attempts)"
            sleep 10
            counter=$((counter+1))
          done

          if [ $counter -eq $max_attempts ]; then
            echo "Warning: Could not verify SSH connectivity after $max_attempts attempts"
          fi

          echo "Instance ID: $INSTANCE_ID"
          echo "Instance IP: $INSTANCE_IP"
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT

  deploy:
    needs: build-docker-setup-infra
    runs-on: ubuntu-latest

    env:
      REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}

    steps:
      - name: Debug Output IP
        run: 'echo "Using IP address: ${{ needs.build-docker-setup-infra.outputs.instance_ip }}"'

      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: Create .ssh Directory
        run: mkdir -p ~/.ssh

      - name: Add SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keygen -lf ~/.ssh/id_rsa || echo "Key verification failed"

      - name: SSH into EC2 and Deploy Docker Image
        env:
          INSTANCE_IP: ${{ needs.build-docker-setup-infra.outputs.instance_ip }}
          REPO_URI: ${{ secrets.ECR_REPOSITORY_URI }}
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=30 ec2-user@${INSTANCE_IP} "
          sudo systemctl start docker &&
          sudo systemctl enable docker &&
          aws ecr get-login-password --region ap-southeast-2 | sudo docker login --username AWS --password-stdin ${REPO_URI} &&
          sudo docker pull ${REPO_URI}:latest &&
          sudo docker run -d -p 80:80 ${REPO_URI}:latest"