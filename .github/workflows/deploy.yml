name: Deploy Nginx App

on:
  push:
    branches:
      - main

jobs:
  build-docker:
    runs-on: ubuntu-latest

    env:
      REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        run: |
          IMAGE_TAG=latest

  #        docker build -t $REPOSITORY_URI:$IMAGE_TAG .
  #        docker push $REPOSITORY_URI:$IMAGE_TAG

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.0

      - name: Initialize Terraform
        working-directory: ./infra
        run: terraform init

      - name: Apply Terraform
        working-directory: ./infra
        run: terraform apply -auto-approve

      - name: Get EC2 Instance Public IP
        id: output
        working-directory: ./infra
        run: echo "::set-output name=instance_ip::$(terraform output -raw instance_public_ip)"


  deploy:
    needs: build-docker
    runs-on: ubuntu-latest

    env:
        REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}

    steps:
        - name: Install SSH Client
          run: sudo apt-get install -y openssh-client

        - name: SSH into EC2 and Deploy Docker Image
          run: |
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ steps.output.outputs.instance_ip }} << 'EOF'
            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin $REPOSITORY_URI
            docker pull $REPOSITORY_URI:latest
            docker run -d -p 80:80 $REPOSITORY_URI:latest
            EOF